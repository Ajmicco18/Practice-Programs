1. Package.json file
-Contains scripts that are required to run app (npm start, build,etc)
-Also include dependencies (Other packages required to run react project)

2. Node Modules Folder
-This contains dependencies that are installed and essential to run project
-They are installed when you run create-react-app command

3. Public Folder
-Favicon icon is useless
-index.html is the main file in the app (Should not change any of the code here)
-React will dynamically insert files and components 
-The <div id="root"></div> allows React to take control of the HTML file
-Also contains two other logos (Insignificant)
-The manifest.json file is also insignificant

4. src Folder
-index.js is the starting point of the React app
-document.getElementById in the index.js file allows React to use the HTML defined in index.html
-Renders the app component from app.js (Import App from './app')
-App.css simply defines the css for the app.js file
-App.test.js is a test file for the app.js file (Don't worry about until testing)
-index.css simply defines the css for the index.js file 
-Another logo
-reportWebVitals.js will be deleted and insignificant
-setupTests.js is also insignificant


Components
-Part of a user interface and key building block of React 
-Each app contains several small components
-Smaller, nested components makeup the larger parent component
-Components can be reused multiply times with different properties
-Component code is usually placed in JavaScript file (.js file)
-Can create a functional component or class component 

Functional Components
-Simply a JS function that accepts a prop and returns HTML to describe the UI 
-They are literally just JavaScript functions

Class Component
-It is simply a regular JavaScript class that extends from React's component class
-However, they must contain a render method that returns HTML


JSX
-JSX stands for JavaScript XML 
-JSX is an extension of JS syntax
-You use JSX instead of HTML because JSX allows you write XML-like code and allows you
to make your code simpler.


Props (Properties)
-Props are read only so you cannot change them (They are immutable)
-Props are objects that hold info to control behavior of a control
-Props are PASSED to the component 
-Accessed as props, this.props
-They are like parameters passed to a function 


State
-State is also an object that holds info but that info can be changed
-Contained inside a component 
-Access state in functional components using useState hook
-Access state in class components using this.state
-Like a variable defined inside a function


Ways to Bind Events
1. Define method in constructor by using this.function=this.function.bind(this)
2. Defining function using arrow notation (Arrow notation can access this keyword) 
3. Define function normally, but use arrow notation in {} in event handler
The most recommended way is simply to use arrow functions 

useState Hook 
-Set an "array" equal to useState() (const[var,setVar]= useState())
-The useState hook allows you to set the initial value of your variable
-The first element in the array is the variable
-The second element in the array is the function used to manipulate the variable




